@model IEnumerable<Grocery.Models.Product>
@{
    ViewBag.Title = "Управление продуктами";
}

<div class="container-fluid">
    <h2>Управление продуктами</h2>

    <div class="table-responsive mb-4" style="height: 50vh; overflow-y: auto;">
        <table class="table table-striped table-bordered">
            <thead class="thead-light" style="position: sticky; top: 0; z-index: 1; background-color: #e0f2f7;">
                <tr>
                    <th>ID</th>
                    <th>
                        <span style="text-decoration: none; color: inherit; display: flex; align-items: center;">
                            @Html.ActionLink("Название", "Index", new { sortOrder = ViewBag.NameSortParm, searchString = ViewBag.CurrentFilter }, new { style = "text-decoration: none; color: inherit;" })
                            @if (ViewBag.NameSortParm == "name_desc")
                            {
                                <i class="fas fa-sort-down ml-1"></i>
                            }
                            else if (!String.IsNullOrEmpty(ViewBag.NameSortParm))
                            {
                                <i class="fas fa-sort-up ml-1"></i>
                            }
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter ml-2" viewBox="0 0 16 16">
                                <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                            </svg>
                        </span>
                    </th>
                    <th>
                        <span style="text-decoration: none; color: inherit; display: flex; align-items: center;">
                            @Html.ActionLink("Количество", "Index", new { sortOrder = ViewBag.QuantitySortParm, searchString = ViewBag.CurrentFilter }, new { style = "text-decoration: none; color: inherit;" })
                            @if (ViewBag.QuantitySortParm == "quantity_desc")
                            {
                                <i class="fas fa-sort-down ml-1"></i>
                            }
                            else if (ViewBag.QuantitySortParm == "Quantity")
                            {
                                <i class="fas fa-sort-up ml-1"></i>
                            }
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter ml-2" viewBox="0 0 16 16">
                                <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                            </svg>
                        </span>
                    </th>
                    <th>
                        <span style="text-decoration: none; color: inherit; display: flex; align-items: center;">
                            @Html.ActionLink("Полка", "Index", new { sortOrder = ViewBag.ShelfSortParm, searchString = ViewBag.CurrentFilter }, new { style = "text-decoration: none; color: inherit;" })
                            @if (ViewBag.ShelfSortParm == "shelf_desc")
                            {
                                <i class="fas fa-sort-down ml-1"></i>
                            }
                            else if (ViewBag.ShelfSortParm == "ShelfNumber")
                            {
                                <i class="fas fa-sort-up ml-1"></i>
                            }
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter ml-2" viewBox="0 0 16 16">
                                <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                            </svg>
                        </span>
                    </th>
                    <th>
                        <span style="text-decoration: none; color: inherit; display: flex; align-items: center;">
                            @Html.ActionLink("Поставщик", "Index", new { sortOrder = ViewBag.SupplierSortParm, searchString = ViewBag.CurrentFilter }, new { style = "text-decoration: none; color: inherit;" })
                            @if (ViewBag.SupplierSortParm == "supplier_desc")
                            {
                                <i class="fas fa-sort-down ml-1"></i>
                            }
                            else if (ViewBag.SupplierSortParm == "Supplier")
                            {
                                <i class="fas fa-sort-up ml-1"></i>
                            }
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-filter ml-2" viewBox="0 0 16 16">
                                <path d="M6 10.5a.5.5 0 0 1 .5-.5h3a.5.5 0 0 1 0 1h-3a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-2-3a.5.5 0 0 1 .5-.5h11a.5.5 0 0 1 0 1h-11a.5.5 0 0 1-.5-.5z" />
                            </svg>
                        </span>
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr class="product-row" data-id="@item.ProductId" data-name="@item.ProductName"
                        data-quantity="@item.Quantity" data-shelf="@item.ShelfNumber"
                        data-supplierid="@item.SupplierId">
                        <td>@item.ProductId</td>
                        <td>@item.ProductName</td>
                        <td>@item.Quantity</td>
                        <td>@item.ShelfNumber</td>
                        <td>@item.Supplier.Name</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="operations-container">
        <div class="operation-group mb-4">
            @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-inline", id = "editForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="d-flex align-items-center">
                    @Html.TextBox("ProductId", null, new { @class = "form-control", id = "editProductId", placeholder = "ID", required = "required", style = "width: 50px;" })
                    @Html.TextBox("ProductName", null, new { @class = "form-control ml-2", id = "editProductName", placeholder = "Название", required = "required" })
                    @Html.TextBox("Quantity", null, new { @class = "form-control ml-2", id = "editQuantity", placeholder = "Количество", type = "number" })
                    @Html.TextBox("ShelfNumber", null, new { @class = "form-control ml-2", id = "editShelfNumber", placeholder = "Полка" })
                    @Html.DropDownList("SupplierId", null, "-- Поставщик --", new { @class = "form-control ml-2", id = "editSupplierId" })
                    <button type="submit" class="btn btn-primary ml-2" id="editButton">Изменить</button>
                </div>
                @Html.ValidationMessage("ProductName", "", new { @class = "text-danger" })
                @Html.ValidationMessage("Quantity", "", new { @class = "text-danger" })
                @Html.ValidationMessage("ShelfNumber", "", new { @class = "text-danger" })
                @Html.ValidationMessage("SupplierId", "", new { @class = "text-danger" })
            }
        </div>

        <div class="operation-group mb-4">
            @using (Html.BeginForm("Create", "Products", FormMethod.Post, new { @class = "form-inline", id = "createForm" }))
            {
                @Html.AntiForgeryToken()
                <div class="d-flex align-items-center">
                    @Html.TextBox("ProductName", null, new { @class = "form-control", placeholder = "Название", required = "required" })
                    @Html.TextBox("Quantity", null, new { @class = "form-control ml-2", placeholder = "Количество", type = "number" })
                    @Html.TextBox("ShelfNumber", null, new { @class = "form-control ml-2", placeholder = "Полка" })
                    @Html.DropDownList("SupplierId", null, "-- Поставщик --", new { @class = "form-control ml-2" })
                    <button type="submit" class="btn btn-success ml-2">Добавить</button>
                </div>
                @Html.ValidationMessage("ProductName", "", new { @class = "text-danger" })
                @Html.ValidationMessage("Quantity", "", new { @class = "text-danger" })
                @Html.ValidationMessage("ShelfNumber", "", new { @class = "text-danger" })
                @Html.ValidationMessage("SupplierId", "", new { @class = "text-danger" })
            }
        </div>

        <div class="operation-group">
            <div class="d-flex align-items-center">
                @using (Html.BeginForm(null, null, FormMethod.Post, new { @class = "form-inline mr-3", id = "deleteForm" }))
                {
                    @Html.AntiForgeryToken()
                    <div class="d-flex align-items-center">
                        @Html.TextBox("id", null, new { @class = "form-control", id = "deleteProductId", placeholder = "ID", required = "required", style = "width: 50px;" })
                        <button type="submit" class="btn btn-danger ml-2" id="deleteButton">Удалить</button>
                    </div>
                }

                @using (Html.BeginForm("Index", "Products", FormMethod.Get, new { @class = "form-inline" }))
                {
                    <div class="d-flex align-items-center ml-3">
                        @Html.TextBox("searchString", ViewBag.CurrentFilter as string, new { @class = "form-control", placeholder = "Поиск по названию" })
                        <button type="submit" class="btn btn-secondary ml-2">Найти</button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary ml-2">Сбросить</a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $(document).ready(function () {
            // Выделение строки и заполнение формы
            $('.product-row').click(function () {
                $('.product-row').removeClass('table-active');
                $(this).addClass('table-active');

                var id = $(this).data('id');
                var name = $(this).data('name');
                var quantity = $(this).data('quantity');
                var shelf = $(this).data('shelf');
                var supplierId = $(this).data('supplierid');

                $('#editProductId').val(id);
                $('#editProductName').val(name);
                $('#editQuantity').val(quantity);
                $('#editShelfNumber').val(shelf);
                $('#editSupplierId').val(supplierId);
                $('#deleteProductId').val(id);
            });

            // Обработка формы редактирования
            $('#editForm').submit(function (e) {
                e.preventDefault();

                var productId = $('#editProductId').val();
                var formData = $(this).serialize();

                if (!productId || isNaN(productId)) {
                    return;
                }

                $.ajax({
                    url: '/Products/Edit/' + productId,
                    type: 'POST',
                    data: formData,
                    success: function (result) {
                        if (result.success) {
                            var row = $('.product-row[data-id="' + productId + '"]');
                            row.find('td:eq(1)').text($('#editProductName').val());
                            row.find('td:eq(2)').text($('#editQuantity').val());
                            row.find('td:eq(3)').text($('#editShelfNumber').val());
                            row.find('td:eq(4)').text(result.supplierName);

                            // Обновляем data-атрибуты
                            row.data('name', $('#editProductName').val());
                            row.data('quantity', $('#editQuantity').val());
                            row.data('shelf', $('#editShelfNumber').val());
                            row.data('supplierid', $('#editSupplierId').val());
                        }
                    },
                    error: function () {
                        // Ошибка сервера
                    }
                });
            });

            // Обработка формы удаления
            $('#deleteForm').submit(function (e) {
                e.preventDefault();

                var productId = $('#deleteProductId').val();

                if (!productId || isNaN(productId)) {
                    return;
                }

                $.ajax({
                    url: '/Products/Delete/' + productId,
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('.product-row[data-id="' + productId + '"]').remove();
                            $('#deleteProductId').val('');
                        }
                    },
                    error: function () {
                        // Ошибка сервера
                    }
                });
            });

            // Очистка формы после добавления
            $('form[action*="Create"]').submit(function () {
                if ($(this).valid()) {
                    setTimeout(() => {
                        $(this).find('input[type="text"]').val('');
                        $(this).find('select').val('');
                    }, 100);
                }
            });

            // Обработка формы добавления
            $('#createForm').submit(function (e) {
                e.preventDefault();

                $.ajax({
                    url: $(this).attr('action'),
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function (response) {
                        if (response.success) {
                            // Перезагружаем страницу для обновления списка
                            location.reload();
                        } else {
                            alert('Ошибка при добавлении: ' + (response.message || 'Неизвестная ошибка'));
                        }
                    },
                    error: function (xhr) {
                        alert('Ошибка сервера: ' + xhr.statusText);
                    }
                });
            });
        });
    </script>

    <style>
        .product-row {
            cursor: pointer;
            transition: background-color 0.2s;
        }

            .product-row:hover {
                background-color: rgba(0, 0, 0, 0.075);
            }

        .table-active {
            background-color: #e0f7fa !important;
        }

        .table-responsive {
            border: 1px solid #dee2e6;
        }

        .operations-container {
            margin-top: 20px;
        }

        .operation-group {
            margin-bottom: 15px;
            padding: 10px;
            background-color: #f8f9fa;
            border-radius: 4px;
        }

        .ml-1 {
            margin-left: 0.25rem !important;
        }

        .ml-2 {
            margin-left: 0.5rem !important;
        }

        .mr-3 {
            margin-right: 1rem !important;
        }

        .form-control {
            min-width: 150px;
        }
    </style>
}